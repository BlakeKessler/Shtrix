#include "Piece.hpp"


void shtrix::Piece::rotR() {
   rotL();
   rotL();
   rotL();
}
void shtrix::Piece::rotL() {
   revRows();
   transpose();
}

//!NOTE: code generated by ChatGPT
void shtrix::Piece::transpose() {
   // Extract the bits for the columns
   uint16_t c0 = (shape >> 0 ) & 0x000F;  // A0, B0, C0, D0
   uint16_t c1 = (shape >> 4 ) & 0x000F;  // A1, B1, C1, D1
   uint16_t c2 = (shape >> 8 ) & 0x000F;  // A2, B2, C2, D2
   uint16_t c3 = (shape >> 12) & 0x000F;  // A3, B3, C3, D3

   // Repack the bits into the transposed matrix
   shape =
      ((c0 >> 0) & 0x0001)       |  // A0 -> A0
      ((c1 >> 0) & 0x0001) << 1  |  // B0 -> A1
      ((c2 >> 0) & 0x0001) << 2  |  // C0 -> A2
      ((c3 >> 0) & 0x0001) << 3  |  // D0 -> A3

      ((c0 >> 1) & 0x0001) << 4  |  // A1 -> B0
      ((c1 >> 1) & 0x0001) << 5  |  // B1 -> B1
      ((c2 >> 1) & 0x0001) << 6  |  // C1 -> B2
      ((c3 >> 1) & 0x0001) << 7  |  // D1 -> B3

      ((c0 >> 2) & 0x0001) << 8  |  // A2 -> C0
      ((c1 >> 2) & 0x0001) << 9  |  // B2 -> C1
      ((c2 >> 2) & 0x0001) << 10 |  // C2 -> C2
      ((c3 >> 2) & 0x0001) << 11 |  // D2 -> C3

      ((c0 >> 3) & 0x0001) << 12 |  // A3 -> D0
      ((c1 >> 3) & 0x0001) << 13 |  // B3 -> D1
      ((c2 >> 3) & 0x0001) << 14 |  // C3 -> D2
      ((c3 >> 3) & 0x0001) << 15 ;  // D3 -> D3
}
void shtrix::Piece::revRows() {
   uint16 newShape = 0;
   newShape |= (shape & (0x000F)) << 12;
   newShape |= (shape & (0x00F0)) << 4;
   newShape |= (shape & (0x0F00)) >> 4;
   newShape |= (shape & (0xF000)) >> 12;
   shape = newShape;
}